{
  "version": 3,
  "sources": ["src/index.ts", "src/step/cp.ts", "src/step/mkdir.ts", "src/step/rm.ts", "src/step/steplist.ts", "src/step/lessc.ts", "src/step/markdownc.ts", "src/step/pugc.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport { readFile } from \"fs/promises\";\nimport * as toml from \"toml\";\n\nimport cp from \"./step/cp\";\nimport mkdir from \"./step/mkdir\";\nimport rm from \"./step/rm\";\nimport steplist from \"./step/steplist\";\nimport lessc from \"./step/lessc\";\nimport markdownc from \"./step/markdownc\";\nimport pugc from \"./step/pugc\";\n\nconst steps: any = {\n  cp,\n  lessc,\n  markdownc,\n  mkdir,\n  pugc,\n  rm,\n  steplist,\n};\n\nconst getBuildConfig = async () => {\n  const buf = await readFile(\"bssg.toml\");\n  const parsed = toml.parse(buf.toString());\n  const result = JSON.parse(JSON.stringify(parsed));\n\n  if (!result.hasOwnProperty(\"bssg\")) {\n    throw new Error(\"bssg.toml does not have a 'bssg' top-level key\");\n  }\n\n  return result;\n};\n\nconst processBuildConfig = async (buildConfig: any) => {\n  const runStep = async (stepName: string) => {\n    const stepConfig = buildConfig[stepName];\n\n    if (stepConfig === undefined) {\n      throw new Error(`Could not find step '${stepName}'`);\n    }\n\n    const step = steps[stepConfig.step];\n    console.log(`${stepName}: ${step.description(stepConfig)}`);\n    await step.step(stepConfig, runStep);\n  };\n\n  await runStep(\"build\");\n\n  console.log(\"bssg build complete\");\n};\n\ngetBuildConfig()\n  .then(processBuildConfig)\n  .catch((e) => console.log(e.message));\n", "import { cp } from \"fs/promises\";\n\ntype CpProps = {\n  inputFile: string;\n  outputFile: string;\n};\n\nconst description = (props: CpProps) => {\n  return `cp (${props.inputFile} -> ${props.outputFile})`;\n};\n\nconst step = async (props: CpProps) => {\n  return cp(props.inputFile, props.outputFile);\n};\n\nexport default { description, step };\n", "import { mkdir } from \"fs/promises\";\n\ntype MkdirProps = {\n  path: string;\n};\n\nconst description = (props: MkdirProps) => {\n  return `mkdir (${props.path})`;\n};\n\nconst step = async (props: MkdirProps) => {\n  return mkdir(props.path);\n};\n\nexport default { description, step };\n", "import { rm } from \"fs/promises\";\n\ntype RmProps = {\n  path: string;\n};\n\nconst description = (props: RmProps) => {\n  return `rm (${props.path})`;\n};\n\nconst step = async (props: RmProps) => {\n  return rm(props.path, { recursive: true, force: true });\n};\n\nexport default { description, step };\n", "type StepListProps = {\n  steps: string[];\n};\n\nconst description = (props: StepListProps) => {\n  return `steplist (${props.steps})`;\n};\n\nconst step = async (\n  props: StepListProps,\n  runStep: (stepName: string) => any\n) => {\n  for (const stepName of props.steps) {\n    await runStep(stepName);\n  }\n};\n\nexport default { description, step };\n", "import { readFile, writeFile } from \"fs/promises\";\nimport { render } from \"less\";\n\ntype LessCProps = {\n  inputFile: string;\n  outputFile: string;\n};\n\nconst description = (props: LessCProps) => {\n  return `lessc (${props.inputFile} -> ${props.outputFile})`;\n};\n\nconst step = async (props: LessCProps) => {\n  const input = await readFile(props.inputFile);\n  const output = await render(input.toString());\n  return writeFile(props.outputFile, output.css);\n};\n\nexport default { description, step };\n", "import { readFile, writeFile } from \"fs/promises\";\nimport unified = require(\"unified\");\nimport remarkParse = require(\"remark-parse\");\nimport remarkRehype = require(\"remark-rehype\");\nimport rehypeStringify = require(\"rehype-stringify\");\nimport { compileFile } from \"pug\";\nimport pretty = require(\"pretty\");\n\ntype MarkdownCProps = {\n  inputFile: string;\n  outputFile: string;\n  extends: string;\n};\n\nconst description = (props: MarkdownCProps) => {\n  return `markdownc (extends: ${props.extends}, ${props.inputFile} -> ${props.outputFile})`;\n};\n\nconst step = async (props: MarkdownCProps) => {\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkRehype)\n    .use(rehypeStringify);\n\n  const input = await readFile(props.inputFile);\n  const converted = await processor.process(input.toString());\n  const htmlOutput = converted.contents as string;\n  const pugOutput = compileFile(props.extends)();\n  const combinedOutput = pugOutput.replace(\"BLOCK_CONTENT\", htmlOutput);\n  const output = pretty(combinedOutput);\n  return writeFile(props.outputFile, output);\n};\n\nexport default { description, step };\n", "import { compileFile } from \"pug\";\nimport { readFile, writeFile } from \"fs/promises\";\nimport pretty = require(\"pretty\");\n\ntype PugCProps = {\n  inputFile: string;\n  outputFile: string;\n  localsFile?: string;\n};\n\nconst getLocals = async (localsFile?: string) => {\n  if (localsFile) {\n    const buffer = await readFile(localsFile);\n    return JSON.parse(buffer.toString());\n  }\n\n  return {};\n};\n\nconst description = (props: PugCProps) => {\n  return `pugc (localsFile: ${props.localsFile}, ${props.inputFile} -> ${props.outputFile})`;\n};\n\nconst step = async (props: PugCProps) => {\n  const locals = await getLocals(props.localsFile);\n  const pugOutput = compileFile(props.inputFile)(locals);\n  const output = pretty(pugOutput);\n  return writeFile(props.outputFile, output);\n};\n\nexport default { description, step };\n"],
  "mappings": "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",
  "names": []
}
