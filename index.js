#!/usr/bin/env node
"use strict";var g=require("fs/promises");var i=require("fs/promises"),F=t=>`cp (${t.inputFile} -> ${t.outputFile})`,P=async t=>(0,i.cp)(t.inputFile,t.outputFile),n={description:F,step:P};var p=require("fs/promises"),y=t=>`mkdir (${t.path})`,$=async t=>(0,p.mkdir)(t.path),u={description:y,step:$};var c=require("fs/promises"),b=t=>`rm (${t.path})`,h=async t=>(0,c.rm)(t.path,{recursive:!0,force:!0}),l={description:b,step:h};var s=require("fs/promises"),a=require("./node_modules/less/index.js"),w=t=>`transformless (${t.inputFile} -> ${t.outputFile})`,S=async t=>{let r=await(0,s.readFile)(t.inputFile),o=await(0,a.render)(r.toString());return(0,s.writeFile)(t.outputFile,o.css)},m={description:w,step:S};var f=require("./node_modules/pug/lib/index.js"),e=require("fs/promises"),k=async t=>{if(t){let r=await(0,e.readFile)(t);return JSON.parse(r.toString())}return{}},T=t=>`transformpug (locals: ${t.localsFile}, ${t.inputFile} -> ${t.outputFile})`,x=async t=>{let r=k(t.localsFile),o=(0,f.compileFile)(t.inputFile)(r);return(0,e.writeFile)(t.outputFile,o)},d={description:T,step:x};var C={cp:n,mkdir:u,rm:l,transformless:m,transformpug:d},L=async()=>{let t=await(0,g.readFile)("bssg.json");return JSON.parse(t.toString())},M=async t=>{for(let r of t.buildSteps){let o=C[r.step];console.log(`start: ${o.description(r)}`),await o.step(r),console.log(`done:  ${o.description(r)}`)}console.log("bssg build complete")};L().then(M).catch(t=>console.log(t));
//# sourceMappingURL=index.js.map
