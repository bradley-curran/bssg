#!/usr/bin/env node
"use strict";var w=require("fs/promises");var p=require("fs/promises"),T=t=>`cp (${t.inputFile} -> ${t.outputFile})`,x=async t=>(0,p.cp)(t.inputFile,t.outputFile),u={description:T,step:x};var a=require("fs/promises"),b=t=>`mkdir (${t.path})`,O=async t=>(0,a.mkdir)(t.path),c={description:b,step:O};var m=require("fs/promises"),S=t=>`rm (${t.path})`,C=async t=>(0,m.rm)(t.path,{recursive:!0,force:!0}),l={description:S,step:C};var o=require("fs/promises"),f=require("./node_modules/less/index.js"),q=t=>`transformless (${t.inputFile} -> ${t.outputFile})`,M=async t=>{let r=await(0,o.readFile)(t.inputFile),e=await(0,f.render)(r.toString());return(0,o.writeFile)(t.outputFile,e.css)},d={description:q,step:M};var i=require("fs/promises"),g=require("./node_modules/pug/lib/index.js"),L=require("./node_modules/unified/index.js"),v=require("./node_modules/remark-parse/index.js"),N=require("./node_modules/remark-rehype/index.js"),R=require("./node_modules/rehype-stringify/index.js"),B=require("./node_modules/pretty/index.js"),J=t=>`transformmarkdown (extends: ${t.extends}, ${t.inputFile} -> ${t.outputFile})`,j=async t=>{let r=L().use(v).use(N).use(R),e=await(0,i.readFile)(t.inputFile),$=(await r.process(e.toString())).contents,k=(0,g.compileFile)(t.extends)().replace("BLOCK_CONTENT",$),h=B(k);return(0,i.writeFile)(t.outputFile,h)},F={description:J,step:j};var y=require("./node_modules/pug/lib/index.js"),s=require("fs/promises"),E=require("./node_modules/pretty/index.js"),K=async t=>{if(t){let r=await(0,s.readFile)(t);return JSON.parse(r.toString())}return{}},_=t=>`transformpug (locals: ${t.localsFile}, ${t.inputFile} -> ${t.outputFile})`,z=async t=>{let r=await K(t.localsFile),e=(0,y.compileFile)(t.inputFile)(r),n=E(e);return(0,s.writeFile)(t.outputFile,n)},P={description:_,step:z};var A={cp:u,mkdir:c,rm:l,transformless:d,transformmarkdown:F,transformpug:P},D=async()=>{let t=await(0,w.readFile)("bssg.json");return JSON.parse(t.toString())},G=async t=>{for(let r of t.buildSteps){let e=A[r.step];console.log(`start: ${e.description(r)}`),await e.step(r),console.log(`done:  ${e.description(r)}`)}console.log("bssg build complete")};D().then(G).catch(t=>console.log(t));
//# sourceMappingURL=index.js.map
